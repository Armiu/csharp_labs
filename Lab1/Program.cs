using System;
using System.Collections.Generic;
using System.Numerics;

namespace Lab1 {
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ DataItem
    public struct DataItem {
        public double X { get; set; }
        public Complex Y1 { get; set; }
        public Complex Y2 { get; set; }

        public DataItem(double x, Complex y1, Complex y2) {
            X = x;
            Y1 = y1;
            Y2 = y2;
        }
        
        public override string ToString() { 
            return $"X: {X}, Y1: {Y1}, Y2: {Y2}";
        }

        public string ToString(string format){
            return $"X: {X.ToString(format)}, Y1: {Y1.ToString(format)}, Y2: {Y2.ToString(format)}";
        }
    }

    // –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å V1Data
    public abstract class V1Data {
        public string Key { get; set; }
        public DateTime Date { get; set; }

        public V1Data(string key, DateTime date) {
            Key = key;
            Date = date;
        }

        public abstract int XLength { get; }
        public abstract (double, double) MinMaxDifference { get; }

        public abstract string ToLongString(string format);

        public override string ToString() {
            return $"Key: {Key}, Date: {Date}";
        }        
    }


    // –ö–ª–∞—Å—Å V1DataArray (–¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –º–∞—Å—Å–∏–≤–∞—Ö)
    public class V1DataArray : V1Data {
        //–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ùíô  —É–∑–ª–æ–≤ —Å–µ—Ç–∫–∏
        public double[] XArray { get; set; }
        //–∏–∑–º–µ—Ä–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è  –ø–æ–ª
        public Complex[] YArray { get; set; }

        public V1DataArray(string key, DateTime date) : base(key, date) {
            XArray = new double[0];
            YArray = new Complex[0];
        }

        public V1DataArray(string key, DateTime date, double[] x, FValues F) : base(key, date) {
            XArray = x;
            YArray = new Complex[x.Length * 2];
            for (int i = 0; i < x.Length; i++) {
                Complex y1 = new Complex();
                Complex y2 = new Complex();
                F(x[i], ref y1, ref y2);
                YArray[i * 2] = y1;
                YArray[i * 2 + 1] = y2;
            }
        }

        public DataItem? this[int index] {
            get {
                if (index >= 0 && index < XArray.Length) {
                    return new DataItem(XArray[index], YArray[2 * index], YArray[2 * index + 1]);
                }
                return null;
            }
        }

        public override int XLength => XArray.Length;

        public override (double, double) MinMaxDifference {
            get {
                if (XArray.Length == 0) return (0, 0);

                double min = double.MaxValue;
                double max = double.MinValue;

                for (int i = 0; i < XArray.Length; i++) {
                    double diff = (YArray[i * 2] - YArray[i * 2 + 1]).Magnitude;
                    if (diff < min) min = diff;
                    if (diff > max) max = diff;
                }

                return (min, max);
            }
        }

        public override string ToString() {
            //–ú–µ—Ç–æ–¥ ToString –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ V1Data –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞, 
            //—Ç–∞–∫–∏–º–∏ –∫–∞–∫ Key –∏ Date
            return $"V1DataArray: {base.ToString()}, Length: {XArray.Length}";
        }

        public override string ToLongString(string format) {
            string result = ToString() + "\n";
            for (int i = 0; i < XArray.Length; i++) {
                result += $"X: {XArray[i].ToString(format)}, Y1: {YArray[2 * i].ToString(format)}, Y2: {YArray[2 * i + 1].ToString(format)}\n";
            }
            return result;
        }
    }

    // –ö–ª–∞—Å—Å V1DataList (–¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ List<DataItem>)
    public class V1DataList : V1Data {
        public List<DataItem> DataList { get; set; } = new List<DataItem>();

        public V1DataList(string key, DateTime date) : base(key, date) { }

        public V1DataList(string key, DateTime date, double[] x, FDI fdi) : base(key, date) {
            //hashset —É—á–∏—Ç—ã–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤ –Ω–µ–≥–æ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è
            HashSet<double> uniqueX = new HashSet<double>();
            foreach (double xCoord in x) {
                //–ú–µ—Ç–æ–¥ Add –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ HashSet, –∏ false, 
                //–µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ xCoord 
                //—É–Ω–∏–∫–∞–ª—å–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ–ª–æ if.
                if (uniqueX.Add(xCoord)) {
                    DataItem data = fdi(xCoord);
                    DataList.Add(data);
                }
            }
        }
        // —á–∏—Å–ª–æ —É–∑–ª–æ–≤ —Å–µ—Ç–∫–∏
        public override int XLength => DataList.Count;


        //–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–¥—É–ª—è —Ä–∞–∑–Ω–æ—Å—Ç–∏
        //–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–æ–ª—è
        public override (double, double) MinMaxDifference {
            get {
                if (DataList.Count == 0) return (0, 0);
                double min = double.MaxValue, max = double.MinValue;

                foreach (var item in DataList) {
                    // Magnitude –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–¥—É–ª—å (–∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ) –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —á–∏—Å–ª–∞
                    double difference = (item.Y1 - item.Y2).Magnitude;
                    if (difference < min) min = difference;
                    if (difference > max) max = difference;
                }
                return (min, max);
            }
        }

       //–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ
        // public static explicit operator V1DataArray(V1DataList source) {
        //     double[] xArray = source.DataList.Select(item => item.X).ToArray();
            
        //     // –°–æ–∑–¥–∞–µ–º –¥–µ–ª–µ–≥–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–µ–ª
        //     FValues fValues = (double x, ref Complex y1, ref Complex y2) => {
        //         var dataItem = source.DataList.First(item => item.X == x);
        //         y1 = dataItem.Y1;
        //         y2 = dataItem.Y2;
        //     };

        //     // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∞—Ç –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ V1DataArray
        //     return new V1DataArray(source.Key, source.Date, xArray, fValues);
        // }

        public static explicit operator V1DataArray(V1DataList source) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç V1DataArray —Å –∫–ª—é—á–æ–º –∏ –¥–∞—Ç–æ–π –∏–∑ source
            V1DataArray result = new V1DataArray(source.Key, source.Date);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–æ–≤
            result.XArray = new double[source.DataList.Count];
            result.YArray = new Complex[source.DataList.Count * 2];

            // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤—ã –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
            for (int i = 0; i < source.DataList.Count; i++) {
                result.XArray[i] = source.DataList[i].X;
                result.YArray[i * 2] = source.DataList[i].Y1;
                result.YArray[i * 2 + 1] = source.DataList[i].Y2;
            }

            return result;
        }

        public override string ToString() {
            return $"Type: V1DataList, {base.ToString()}, Count: {DataList.Count}";
        }

        public override string ToLongString(string format) {
            string result = ToString() + "\n";
            foreach (var item in DataList) {
                //–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ–π —É–∑–ª–∞ —Å–µ—Ç–∫–∏ X –∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ–ª—è Y1 –∏ Y2
                result += $"X: {item.X.ToString(format)}, Y1: {item.Y1.ToString(format)}, Y2: {item.Y2.ToString(format)}\n";
            }
            return result;
        }
    }

    public delegate void Fy3Values(double x, ref System.Numerics.Complex y3);




       // –ö–ª–∞—Å—Å V1DDataList (–¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ List<Complex>)
    public class V1DDataList : V1DataList {
        public List<Complex> Y3List { get; set; } = new List<Complex>();

        public V1DDataList(string key, DateTime date, double[] x, FDI F, Fy3Values Fy3) : base(key, date, x, F) {
            foreach (var item in DataList) {
                Complex y3 = new Complex();
                Fy3(item.X, ref y3);
                Y3List.Add(y3);
            }
        }

        public override (double, double) MinMaxDifference {
            get {
                if (DataList.Count == 0) return (0, 0);
                double min = double.MaxValue, max = double.MinValue;

                for (int i = 0; i < DataList.Count; i++) {
                    double difference = (DataList[i].Y1 - Y3List[i]).Magnitude;
                    if (difference < min) min = difference;
                    if (difference > max) max = difference;
                }
                return (min, max);
            }
        }

        public override string ToString() {
            return $"Type: V1DDataList, {base.ToString()}";
        }

        public override string ToLongString(string format) {
            string result = ToString() + "\n";
            for (int i = 0; i < DataList.Count; i++) {
                result += $"X: {DataList[i].X.ToString(format)}, Y1: {DataList[i].Y1.ToString(format)}, Y2: {DataList[i].Y2.ToString(format)}, Y3: {Y3List[i].ToString(format)}\n";
            }
            return result;
        }
    }
    
    // –î–µ–ª–µ–≥–∞—Ç—ã
    
    public delegate void FValues(double x, ref Complex y1, ref Complex y2);
    public delegate DataItem FDI(double x);

    // –ö–ª–∞—Å—Å V1MainCollection
    public class V1MainCollection : List<V1Data> {

        public V1Data? this[string key] {
            get {
                foreach (var item in this) {
                    if (item.Key == key) return item;
                }
                return null;
            }
        }

        public new bool Add(V1Data v1Data) {
            //–¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            foreach (var item in this) {
                if (item.Key == v1Data.Key && item.Date == v1Data.Date) {
                    return false;
                }
            }
            base.Add(v1Data);
            return true;
        }


        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        public V1MainCollection() {
            // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞ V1DataArray
            this.Add(new V1DataArray("Array_1", DateTime.Now, new double[] { 1.0, 2.0, 3.0 }, (double x, ref Complex y1, ref Complex y2) => {
                y1 = new Complex(x, x);
                y2 = new Complex(x + 1, x + 1);
            }));

            // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞ V1DataList
            this.Add(new V1DataList("List_1", DateTime.Now, new double[] { 1.0, 2.0, 3.0 }, x => new DataItem(x, new Complex(x, x), new Complex(x + 1, x + 1))));

            // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞ V1DDataList
            this.Add(new V1DDataList("DList_1", DateTime.Now, new double[] { 1.0, 2.0, 3.0 }, x => new DataItem(x, new Complex(x, x), new Complex(x + 1, x + 1)), (double x, ref Complex y3) => {
                y3 = new Complex(x + 2, x + 2);
            }));
        }

        public V1MainCollection(int nA, int nL) {
            for (int i = 0; i < nA; i++) {
                this.Add(new V1DataArray($"Array_{i}", DateTime.Now, new double[] { i, i + 1, i + 2 }, (double x, ref Complex y1, ref Complex y2) => {
                    y1 = new Complex(x, x);
                    y2 = new Complex(x + 1, x + 1);
                }));
            }

            for (int i = 0; i < nL; i++) {
                this.Add(new V1DataList($"List_{i}", DateTime.Now));
            }
        }

        //–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–∂–¥–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏;
        public string ToLongString(string format) {
            string result = "";
            foreach (var item in this) {
                result += item.ToLongString(format) + "\n";
            }
            return result;
        }

        public override string ToString() {
            string result = "";
            foreach (var item in this) {
                result += item.ToString() + "\n";
            }
            return result;
        }
    }

    class Program {
        static void Main(string[] args) {
            // 1. –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ V1DataList –∏ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
            V1DataList dataList = new V1DataList("List_1", DateTime.Now, new double[] { 1.0, 2.0, 3.0 }, x => new DataItem(x, new Complex(x, x), new Complex(x + 1, x + 1)));
            Console.WriteLine("V1DataList:");
            //"F2" –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —á–∏—Å–ª–∞ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å –¥–≤—É–º—è –∑–Ω–∞–∫–∞–º–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            Console.WriteLine(dataList.ToLongString("F2"));
            // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å V1DataList –≤ V1DataArray –∏ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
            V1DataArray dataArray = (V1DataArray)dataList;
            Console.WriteLine("V1DataArray (after conversion):");
            Console.WriteLine(dataArray.ToLongString("F2"));

            // 2. –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ V1DataArray –∏ –≤—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞
            V1DataArray dataArray2 = new V1DataArray("Array_1", DateTime.Now, new double[] { 1.0, 2.0, 3.0 }, (double x, ref Complex y1, ref Complex y2) => {
                y1 = new Complex(x, x);
                y2 = new Complex(x + 1, x + 1);
            });
            Console.WriteLine("V1DataArray2:");
            Console.WriteLine(dataArray2.ToLongString("F2"));
            // –ó–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞
            Console.WriteLine("Indexer values:");
            Console.WriteLine(dataArray2[1]?.ToString() ?? "Index out of range");
            Console.WriteLine(dataArray2[10]?.ToString() ?? "Index out of range");

            // 3. –°–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ V1MainCollection –∏ –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
            V1MainCollection mainCollection = new V1MainCollection(2, 2);
            Console.WriteLine("V1MainCollection:");
            Console.WriteLine(mainCollection.ToLongString("F2"));

            // 4. –í—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ XLength –∏ MinMaxDifference –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            foreach (var item in mainCollection) {
                Console.WriteLine($"XLength: {item.XLength}, MinMaxDifference: {item.MinMaxDifference}");
            }

            // 5. –í—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º —Ç–∏–ø–∞ string
            Console.WriteLine("Indexer values by key:");
            Console.WriteLine(mainCollection["Array_1"]?.ToString() ?? "Key not found");
            Console.WriteLine(mainCollection["NonExistentKey"]?.ToString() ?? "Key not found");

            //6. –¥–æ–ø –∑–∞–¥–∞–Ω–∏–µ
            V1MainCollection mainCollection1 = new V1MainCollection();
            Console.WriteLine("ADD V1MainCollection:");
            Console.WriteLine(mainCollection1.ToLongString("F2"));

            // –í—ã–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ XLength –∏ MinMaxDifference –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            foreach (var item in mainCollection1) {
                Console.WriteLine($"XLength: {item.XLength}, MinMaxDifference: {item.MinMaxDifference}");
            }
        }
    }
}

